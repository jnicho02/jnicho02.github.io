<p>A talk by 500px about microservices http://www.infoq.com/presentations/500px-services jump to 5m</p>

<p>Microservices can be referred to as 'Hipster SOA'</p>

<p>Single responsibility principle</p>

<p>If there is a single, large, codebase then it gets unwieldy. You may be using cloud services, but you are still scaling the whole app rather than the bit that actually needs to scale.</p>

<p>One codebase leads to having only one language/tool/hammer to use. Sometimes a problem can be cured by using a different language but you don't want to mix this in with the big codebase.</p>

<p>If a part of the system fails, you don't want it to affect the others.â€‹ Eliminate Single Points Of Failure. Set up fallback options. A search function can use a cache if the database fails. Semi-live is acceptable.</p>

<p>DevOps practices are essential, otherwise there is an impedence between developers wanting action and sysadmins wanting stability</p>

<p>12 Factor Apps. Thes are good tips for making microservices work</p>

<p>Monitor all the things (they use DataDog)</p>

<p>On call rotation (Pagerduty)</p>

<p>Measure incident response: How it was fixed, how fast, and how it was reported. Mean Time To Detect and Mean Time To Resolve. Acknowledge that failures <em>will</em> happen. Optimise for coping with failures rather than avoiding them.</p>

<p>Gameday Exercises: document failure and what you expect to happen. Do a runthrough. Stop if it starts going wonky and try again later!</p>

<p>Automation: take the complications and distractions away. Enables experimentation.</p>

<p>Use Circuit Breakers. see 'Release It! Design and Deploy Production-Ready Software'</p>

<p>Design for Business Capabilities not technology layers</p>

<p>API Facades: allow a team (like the web team) to manage their own facade which then talks to the back-end service facade. Things can move on without jamming up the process.</p>
