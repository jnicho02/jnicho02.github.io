<p>As Landmark move into the world of Microservice​​​s I think that it is important that we all understand what it actually means. This article gives a reasonable understanding and i've made some notes…​</p>

<ul>
  <li>Microservices are very decoupled. "​Developers can create and activate new microservices without prior coordination with others. Their adherence to microservices architecture principles makes continuous delivery of new or modified services possible."</li>
  <li>Simplicity, tight scope, minimal change request process.</li>
  <li>Microservices architecture is evolving and unproven over the long term.</li>
  <li>"you don’t want elaborate middleware, service buses, or other orchestration brokers, but rather simpler messaging systems such as Apache Kafka."</li>
  <li>fine-grained, stateless, self-contained</li>
  <li>services are expected to change, and some eventually will become disposable</li>
  <li>When a package doesn’t do more than is absolutely necessary, it’s easy to understand and to integrate into other applications</li>
  <li>Favours the "reactive actor" programming model</li>
</ul>

<p>As a result of this independence, you can use the right language for the microservice in question, as well as the right database or other related service</p>

<ul>
  <li>Each single-function microservice has one action</li>
  <li>A small set of data and UI elements is involved</li>
  <li>One developer, or a small team, independently produces a microservice</li>
  <li>Each microservice is its own build, to avoid trunk conflict</li>
  <li>The business logic is stateless</li>
  <li>The data access layer is statefully cached</li>
  <li>New functions are added swiftly, but old ones are retired slowly</li>
</ul>
